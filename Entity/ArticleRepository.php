<?php

namespace Gore\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Gore\BlogBundle\Entity\Article;


/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    /**
     * findAllDesc
     * Get all the articles in database for admin
     * @return type
     */
    public function findAllDesc(){
        $qb = $this->createQueryBuilder('a')
                   ->orderBy('a.date', 'desc');
        
        return $qb->getQuery()->getResult();
    }
    
    
    
    /**
     * findAllPublic
     * Find all public articles in database
     * @return type
     */
    public function findAllPublic(){
        $qb = $this->getMainPublicQb();
        return $qb->getQuery()->getResult();
    }
    
    
    
    /**
     * getPrevious
     * Get the article just before the given one (chronologically)
     * @param \Gore\BlogBundle\Entity\Article $article
     * @return type
     */
    public function getPrevious(Article $article){
        $qb = $this->createQueryBuilder('a')
                   ->where('a.published = true')
                   ->andWhere('a.date < :givendate')
                   ->orderBy('a.date', 'DESC')
                   ->setParameter('givendate', $article->getDate())
                   ->setFirstResult(0)
                   ->setMaxResults(1);
        
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    
    
    /**
     * getNext
     * Get the article just after the given one (chronologically)
     * @param \Gore\BlogBundle\Entity\Article $article
     * @return type
     */
    public function getNext(Article $article){
        $qb = $this->createQueryBuilder('a')
                   ->where('a.published = true')
                   ->andWhere('a.date > :givendate')
                   ->orderBy('a.date', 'ASC')
                   ->setParameter('givendate', $article->getDate())
                   ->setFirstResult(0)
                   ->setMaxResults(1);
        
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    
    
    /**
     * getLastArticles
     * Find all last articles as asked
     * @return type
     */
    public function getLastArticles($nbOfArticles){
        $qb = $this->getMainPublicQb();
        $qb = $this->restrictQbByLimits($qb, 0, $nbOfArticles);
        
        return $qb->getQuery()->getResult();
    }
    
    
    
    /**
     * getArticles
     * Get many public article according to the limits given as parameters
     * @param int $first first article index to get
     * @param int $number number of articles to get
     * @return type
     */
    public function getArticles($first, $number){
        $qb = $this->getMainPublicQb();
        $qb = $this->restrictQbByLimits($qb, $first, $number);
        
        return $qb->getQuery()->getResult();
    }
    
    
    /**
     * getMainPublicQb
     * Generate a basic QueryBuilder for public interface (visible articles)
     */
    private function getMainPublicQb(){
        $qb = $this->createQueryBuilder('a')
                   ->where('a.published = true')
                   ->andWhere('a.date <= :now')
                   ->orderBy('a.date', 'desc')
                   ->setParameter('now', new \Datetime());
        
        return $qb;
    }
   
    
    /**
     * restrictQbByLimits
     * Add first and max result to the request
     * @param QueryBuilder $qb
     */
    private function restrictQbByLimits($qb, $first, $max){
        $qb->setFirstResult($first)
           ->setMaxResults($max);
        
        return $qb;
    }
}
